* dida.el

用于同步dida365和org-mode

#+begin_quote
[!IMPORTANT]
Modified from [[https://github.com/polhuang/tick.el]]

修改自 [[https://github.com/polhuang/tick.el]]
#+end_quote

** 与原repo的异同：

相同之处：沿用了关键步骤的逻辑，如验证、

不同之处：
1. 本repo仅支持dida365（滴答清单）而非ticktick
2. 本repo使用[[https://github.com/alphapapa/plz.el][plz]]包处理HTTP请求，而非手写内置 =url= 包

** 使用介绍

1. 本地载入

#+begin_src elisp
(use-package dida
 :load-path "~/elpa/")
#+end_src

2. 然后在[[https://developer.dida365.com/manage][dida apps]]界面申请APP，填入APP名称（随便填），生成，返回。

3. 点击 =Edit= ，将网页上的 =OAuth redirect URL= 设置为 =http://localhost:1145= 。

4. 将生成的 =client-id= =client-secret= 对应填入本地变量 =dida-client-id= =dida-client-secret= 中

#+begin_src elisp
(setq dida-client-id "114514")
(setq dida-client-secret "1919810")
#+end_src

5. 并设置同步到的本地文件路径 =dida-sync-file= 。

#+begin_src elisp
(setq dida-sync-file "path/to/your/org/file")
#+end_src

6. 执行 =dida-authorize= ，自动打开授权网页，点击「同意」后跳转到本地网页，此时已将Code自动传递进了 =kill-ring= 。

7. 返回Emacs，按 =C-y= 直接粘贴到 =mini-buffer= 中。这就完成了一次授权。

8. 最后自定义同步策略。

#+begin_src elisp
(defun dida-sync ()
  "先push再fetch，以云端为准"
  (interactive)
  (dida-push)
  (dida-fetch))

;; 启动后fetch一次
(add-hook 'after-init-hook #'dida-fetch)

;; 闲置240秒后先push再fetch一次
(run-with-idle-timer 240 t #'dida-sync)
#+end_src

** 细节说明

由于dida api只会返回 =TODO= 状态的task，且只有 =dueDate= ，不区分 =SCHEDULED= 和 =DEADLINE= ，因此我在push时做了如下处理：

如果本地任务有 =SCHEDULED=

-->则创建一个dida task，记录 =SCHEDULED= 提醒时间

如果本地任务有 =DEADLINE=

-->则创建一个dida task，在title前加上 =[D]= ，记录 =DEADLINE= 提醒时间

同样地，fetch时做了对应操作：

如果title前有 =[D]= ，则先暂存并跳过。

然后统一检查暂存，看有无去掉 =[D]= 后title的heading。

-->如果有，则在该heading上添加对应id和deadline信息

-->如果没有，则将暂存的heading信息插入到文件最尾端
